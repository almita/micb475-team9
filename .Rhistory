spotify_artists <- spotify_distinct %>%
nest(.by = artist_name)
spotify_artists
spotify_models <- spotify_artists %>%
mutate(linear_models = map(data, \(x) lm(energy ~ album_release_year, x)),
coef = map_dbl(linear_models, \(x) coef(x) %>% .[[2]]),
adj_r_sq = map_dbl(linear_models, \(x) summary(x) %>% .$adj.r.squared))
names(spotify_models$data) <- artists
spotify_models
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, summary)
)
names(spotify_models$aov) <- artists
names(spotify_models$aov_summary) <- artists
spotify_models %>% unnest(aov_summary)
View(spotify_models)
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, summary)
)
names(spotify_models$aov) <- artists
names(spotify_models$aov_summary) <- artists
spotify_models %>% select(artist_name, aov_summary) %>% unnest(aov_summary)
View(spotify_models[[7]][[1]])
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, summary)
)
names(spotify_models$aov) <- artists
names(spotify_models$aov_summary) <- artists
spotify_models$aov_summary %>% list_flatten()
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, \(x) summary %>% list_flatten())
)
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, \(x) summary(x) %>% list_flatten())
)
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, \(x) summary) %>% list_flatten(),
)
names(spotify_models$aov) <- artists
names(spotify_models$aov_summary) <- artists
spotify_models$aov_summary %>% list_flatten()
View(spotify_models)
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, \(x) summary)
)
names(spotify_models$aov) <- artists
names(spotify_models$aov_summary) <- artists
spotify_models$aov_summary
spotify_models <- spotify_artists %>%
mutate(linear_models = map(data, \(x) lm(energy ~ album_release_year, x)),
coef = map_dbl(linear_models, \(x) coef(x) %>% .[[2]]),
adj_r_sq = map_dbl(linear_models, \(x) summary(x) %>% .$adj.r.squared))
names(spotify_models$data) <- artists
spotify_models
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, \(x) summary)
)
names(spotify_models$aov) <- artists
names(spotify_models$aov_summary) <- artists
spotify_models$aov_summary
spotify_models <- spotify_artists %>%
mutate(linear_models = map(data, \(x) lm(energy ~ album_release_year, x)),
coef = map_dbl(linear_models, \(x) coef(x) %>% .[[2]]),
adj_r_sq = map_dbl(linear_models, \(x) summary(x) %>% .$adj.r.squared))
names(spotify_models$data) <- artists
spotify_models
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, \(x) summary)
)
names(spotify_models$aov) <- artists
names(spotify_models$aov_summary) <- artists
spotify_models$aov_summary %>% list(flatten())
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, \(x) summary)
)
names(spotify_models$aov) <- artists
names(spotify_models$aov_summary) <- artists
spotify_models$aov_summary %>% list_flatten()
spotify_models <- spotify_artists %>%
mutate(linear_models = map(data, \(x) lm(energy ~ album_release_year, x)),
coef = map_dbl(linear_models, \(x) coef(x) %>% .[[2]]),
adj_r_sq = map_dbl(linear_models, \(x) summary(x) %>% .$adj.r.squared))
names(spotify_models$data) <- artists
spotify_models
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, \(x) summary)
)
names(spotify_models$aov) <- artists
names(spotify_models$aov_summary) <- artists
spotify_models$aov_summary %>% list_flatten()
spotify_models <- spotify_artists %>%
mutate(linear_models = map(data, \(x) lm(energy ~ album_release_year, x)),
coef = map_dbl(linear_models, \(x) coef(x) %>% .[[2]]),
adj_r_sq = map_dbl(linear_models, \(x) summary(x) %>% .$adj.r.squared))
names(spotify_models$data) <- artists
spotify_models
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, summary)
)
names(spotify_models$aov) <- artists
names(spotify_models$aov_summary) <- artists
spotify_models$aov_summary %>% list_flatten()
spotify_models <- spotify_artists %>%
mutate(linear_models = map(data, \(x) lm(energy ~ album_release_year, x)),
coef = map_dbl(linear_models, \(x) coef(x) %>% .[[2]]),
adj_r_sq = map_dbl(linear_models, \(x) summary(x) %>% .$adj.r.squared))
names(spotify_models$data) <- artists
spotify_models
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, summary) %>% list_flatten()
)
names(spotify_models$aov) <- artists
names(spotify_models$aov_summary) <- artists
spotify_models$aov_summary
spotify_models$aov$`alt-J`$coefficients
spotify_models$aov_summary$`alt-J` %>% tidy()
spotify_models <- spotify_artists %>%
mutate(linear_models = map(data, \(x) lm(energy ~ album_release_year, x)),
coef = map_dbl(linear_models, \(x) coef(x) %>% .[[2]]),
adj_r_sq = map_dbl(linear_models, \(x) summary(x) %>% .$adj.r.squared))
names(spotify_models$data) <- artists
spotify_models
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, summary) %>% tidy()
)
spotify_models <- spotify_artists %>%
mutate(linear_models = map(data, \(x) lm(energy ~ album_release_year, x)),
coef = map_dbl(linear_models, \(x) coef(x) %>% .[[2]]),
adj_r_sq = map_dbl(linear_models, \(x) summary(x) %>% .$adj.r.squared))
names(spotify_models$data) <- artists
spotify_models
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, summary) %>% list_flatten() %>% broom::tidy()
)
spotify_models <- spotify_artists %>%
mutate(linear_models = map(data, \(x) lm(energy ~ album_release_year, x)),
coef = map_dbl(linear_models, \(x) coef(x) %>% .[[2]]),
adj_r_sq = map_dbl(linear_models, \(x) summary(x) %>% .$adj.r.squared))
names(spotify_models$data) <- artists
spotify_models
spotify_models <- spotify_models %>%
mutate(aov = map(data, \(x) aov(energy ~ album_name, x)),
aov_summary = map(aov, broom::tidy)
)
names(spotify_models$aov) <- artists
names(spotify_models$aov_summary) <- artists
spotify_models$aov_summary$`alt-J`
View(spotify_models[[7]][[1]])
spotify_models %>%
select(artist_name, aov_summary) %>%
hoist(aov_summary, p.value)
spotify_models %>%
select(artist_name, aov_summary) %>%
hoist(aov_summary, p_val = p.value)
spotify_models %>%
select(artist_name, aov_summary) %>%
hoist(aov_summary, p_val = 6)
spotify_models %>%
select(artist_name, aov_summary) %>%
hoist(aov_summary, p_val = p.value[1])
spotify_models %>%
select(artist_name, aov_summary) %>%
hoist(aov_summary, p_val = 6[1])
spotify_models %>%
select(artist_name, aov_summary) %>%
hoist(aov_summary, p_val = "p.value")
spotify_models %>%
unnest(aov_summary)
spotify_models %>%
unnest(aov_summary) %>%
filter(term != "Residuals") %>%
select(artist_name,p.value)
spotify_models <- spotify_models %>%
mutate(tukey = map(aov, \(x) TukeyHSD(x) %>% broom::tidy()))
names(spotify_models$tukey) <- artists
# walk(spotify_models$tukey,
# 		\(x) { tbl <- filter(x, adj.p.value < 0.05) %>% # print only significantly different pairs
# 		select(contrast, estimate, conf.low, conf.high, adj.p.value)
# 		print(tbl)
# 		}
#  	 )
spotify_models %>%
unnest(tukey)
spotify_models %>%
unnest(tukey) %>%
filter(adj.p.value < 0.05) %>%
select(artist_name, contrast, estimate, conf.low, conf.high, adj.p.value)
spotify_models %>%
unnest(tukey) %>%
filter(adj.p.value < 0.05) %>%
select(artist_name, contrast, estimate, conf.low, conf.high)
install.packages("zoo", "BiocManager", "vegan")
install.packages("zoo")
install.packages("vegan")
library("plyr")
metadata <- read.csv("~/Documents/ubc/BIOL503/labs/seagrass_default_metadata.csv")
View(metadata)
mean(metadata$temperature)
sum(metadata$temperature)
min(metadata$temperature)
max(metadata$temperature)
(metadata$conductivity)/(metadata$salinity)
typeof(((metadata$conductivity)/(metadata$salinity)))
metadata$cd.over.sal = (metadata$conductivity)/(metadata$salinity)
View(metadata)
## take all and only the rows in the metadata that are from the substrate zostera
zostera = subset(metadata, metadata$substrate =="zostera")
library(ggplot2)
## dotplot temperature vs salinity
ggplot(zostera, aes(x=salinity, y = temperature))+
geom_point()
ggplot(zostera, aes(x=salinity, y = temperature, color=turbidity))+
geom_point(size=4, shape=8)+
facet_grid(.~region)+
scale_color_gradient(low="cyan1", high="dodgerblue4")+
labs(x = "Water Salinity", y = "Water Temperature", color= "Water Turbidity")+
ggtitle("Dot plot of Water Temperature vs Salinity")+
theme_bw()+
theme(strip.text = element_text(size=18, color="magenta4", face="bold"),
axis.title = element_text(size=12, face="bold"))
ggplot(zostera, aes(x = mean_depth, y = salinity)) +
geom_point()
ggplot(zostera, aes(x = mean_depth, y = salinity, colour = region)) +
geom_point() +
theme_minimal()
ggplot(zostera, aes(x = mean_depth, y = salinity, colour = region)) +
geom_point(size = 5) +
theme_minimal()
ggplot(zostera, aes(x = mean_depth, y = salinity, colour = region)) +
geom_point(size = 3) +
theme_minimal()
ggplot(zostera, aes(x = mean_depth, y = salinity, colour = region)) +
geom_point(size = 3) +
xlab("mean depth") +
theme_bw() +
theme(panel.background = element_blank())
ggplot(zostera, aes(x = mean_depth, y = salinity, colour = region)) +
geom_point(size = 3) +
xlab("mean depth") +
theme_minimal()
version
ggplot(zostera, aes(x = mean_depth, y = salinity, colour = region)) +
geom_point(size = 3) +
xlab("mean depth") +
ggtitle("mean depth vs salinity plot") +
theme_minimal()
library(ggplot2)
metadata <- read.csv("~/Documents/ubc/BIOL503/labs/seagrass_default_metadata.csv")
sum(metadata$temperature)
# answer (1 pt): sums the values in the temperature column of metadata
min(metadata$temperature)
# answer (1 pt): gets the minimum value in the temperature column of metadata
max(metadata$temperature)
# answer (1 pt): gets the maximum value in the temperature column of metadata
(metadata$conductivity)/(metadata$salinity)
# answer (1 pt): divides the values in the conductivity column by the values in the salinity column and outputs a vector of doubles with the resulting values.
## create new column with the last operation from the previous exerscise
metadata$cd.over.sal = (metadata$conductivity)/(metadata$salinity)
## check that this column is there. Add the command in the script you need to have the metadata open up to see the new column. The command is listed earlier in this pdf.
## take all and only the rows in the metadata that are from the substrate zostera
zostera = subset(metadata, metadata$substrate == "zostera")
## dotplot temperature vs salinity
ggplot(zostera, aes(x=salinity, y = temperature))+
geom_point()
## full-send dot plot of temperature vs salinity
ggplot(zostera, aes(x=salinity, y = temperature, color=turbidity))+
geom_point(size=4, shape=8)+
facet_grid(.~region)+
scale_color_gradient(low="cyan1", high="dodgerblue4")+
labs(x = "Water Salinity", y = "Water Temperature", color= "Water Turbidity")+
ggtitle("Dot plot of Water Temperature vs Salinity")+
theme_bw()+
theme(strip.text = element_text(size=18, color="magenta4", face="bold"),
axis.title = element_text(size=12, face="bold"))
## dotplot mean depth vs salinity
ggplot(zostera, aes(x = mean_depth, y = salinity, colour = region)) +
geom_point(size = 3) +
xlab("mean depth") +
ggtitle("mean depth vs salinity plot") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(phyloseq)
library(vegan)
library(car)
raw_data <- readRDS("spring_freshet_lab_rarefied.RDS")
meristem_phyloseq <- subset_samples(raw_data, updated_sample_type == "meristem")
# extract metadata and otu
metadata <- as.data.frame(as.matrix(meristem_phyloseq@sam_data))
otu <- t(as.matrix(meristem_phyloseq@otu_table))
# richness
metadata$rich = specnumber(otu)
# Shannon index
metadata$shan = diversity(otu, index="shannon")
# Pielou's index
metadata$pielou = metadata$shan/(log(metadata$shan))
ggplot(metadata, aes(x=lab_or_field_sampled, y = rich))+
geom_boxplot() +
ylab("Richness") +
xlab("Sample") +
theme_bw()
ggplot(metadata, aes(x=rich, y = shan, color=lab_or_field_sampled))+
geom_point(cex=2, alpha=0.3)+
geom_smooth(method=lm, linewidth=1.5, se=F)+
labs(x="ASV Richness", y="Shannon's Diversity Index", color="Samples")+
scale_color_manual(values=c("#FF9A56", "#D162A4"))+
theme_bw()
aov_richness = aov(rich~lab_or_field_sampled, data=metadata)
summary(aov_richness)
metadata %>% group_by(lab_or_field_sampled) %>% summarise(n = n())
plot(aov_richness)
leveneTest(aov_richness)
ggplot(metadata, aes(x=lab_or_field_sampled, y = shan))+
geom_boxplot() +
ylab("Shannon Index") +
xlab("Sample") +
theme_bw()
aov_shannon <- aov(shan~lab_or_field_sampled, data=metadata)
summary(aov_shannon)
plot(aov_shannon)
leveneTest(aov_shannon)
ggplot(metadata, aes(x=lab_or_field_sampled, y = pielou))+
geom_boxplot() +
ylab("Pielou's Index") +
xlab("Sample") +
theme_bw()
aov_pielou <- aov(pielou~lab_or_field_sampled, data=metadata)
summary(aov_pielou)
plot(aov_pielou)
leveneTest(aov_pielou)
kw_shannon = kruskal.test(shan ~ lab_or_field_sampled, data = metadata)
kw_shannon <- kruskal.test(shan ~ lab_or_field_sampled, data = metadata)
summary(kw_shannon)
kw_shannon
kw_shannon <- kruskal.test(shan ~ lab_or_field_sampled, data = metadata)
kw_shannon
ggplot(metadata, aes(x=rich, y = shan, color=lab_or_field_sampled))+
geom_point(cex=2, alpha=0.3)+
geom_smooth(method=lm, linewidth=1.5, se=F)+
labs(x="ASV Richness", y="Shannon's Diversity Index", color="Samples")+
scale_color_manual(values=c("#FF9A56", "#D162A4"))+
theme_bw()
ggplot(metadata, aes(x=pielou, y = shan, color=lab_or_field_sampled))+
geom_point(cex=2, alpha=0.3)+
geom_smooth(method=lm, linewidth=1.5, se=F)+
labs(x="Pielou's evenness index", y="Shannon's Diversity Index", color="Samples")+
scale_color_manual(values=c("#FF9A56", "#D162A4"))+
theme_bw()
ggplot(metadata, aes(x=rich, y = pielou, color=lab_or_field_sampled))+
geom_point(cex=2, alpha=0.3)+
geom_smooth(method=lm, linewidth=1.5, se=F)+
labs(x="ASV Richness", y="Pielou's evenness index", color="Samples")+
scale_color_manual(values=c("#FF9A56", "#D162A4"))+
theme_bw()
cor.test(metadata$rich, metadata$shan)
cor.test(metadata$shan, metadata$pielou)
cor.test(metadata$rich, metadata$pielou)
sum(c(TRUE, TRUE, FALSE))
class(c("matrix(ncol=10, nrow =10)"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
data <- readRDS("~/Documents/ubc/BIOL503/project/bont2023_unfiltered_phyloseq.RDS")
View(data@sam_data)
setwd("~/Documents/ubc/MICB575/project-2/micb475-team9")
library(phyloseq)
library(ape)
library(tidyverse)
library(phyloseq)
library(ape)
library(tidyverse)
library(vegan)
otu <- read_delim("data/output/exports/feature-table.txt", delim = "\t")
metadata <- read_delim("data/metadata/metadata.tsv", delim = "\t")
taxonomy <- read_delim("data/output/exports/taxonomy.tsv", delim = "\t")
tree <- read.tree("data/output/exports/tree.nwk")
View(otu)
View(taxonomy)
otu <- read_delim("data/output/exports/feature-table.txt", delim = "\t", skip = 1)
metadata <- read_delim("data/metadata/metadata.tsv", delim = "\t")
taxonomy <- read_delim("data/output/exports/taxonomy.tsv", delim = "\t")
tree <- read.tree("data/output/exports/tree.nwk")
View(otu)
View(metadata)
otu_mat <- as.matrix(otu[,-1])
rownames(otu_mat) <- otu$`#OTU ID`
View(otu_mat)
otu_mat <- as.matrix(otu[,-1])
rownames(otu_mat) <- otu$`#OTU ID`
OTU <- otu_table(otu_mat, taxa_are_rows = TRUE)
class(OTU)
# remove sample-id column from dataframe
samp_data <- as.data.frame(metadata[,-1])
# change rownames into sample-id
rownames(samp_data) <- metadata$`sample-id`
# create phyloseq sam table
SAM <- sample_data(samp_data)
# remove #OTU ID column from matrix
otu_mat <- as.matrix(otu[,-1])
# change rownames into #OTU ID column
rownames(otu_mat) <- otu$`#OTU ID`
# create phyloseq otu table
OTU <- otu_table(otu_mat, taxa_are_rows = TRUE)
# check OTU class (should be phyloseq object)
class(OTU)
# remove sample-id column from dataframe
samp_data <- as.data.frame(metadata[,-1])
# change rownames into sample-id
rownames(samp_data) <- metadata$`sample-id`
# create phyloseq sam table
SAM <- sample_data(samp_data)
# check SAM class (should be phyloseq object)
class(SAM)
tax_mat <- taxonomy %>%
select(-c(`Feature ID`, Confidence)) %>%
# reformat taxon strings, separate them into different columns
separate(col = Taxon, sep = "; ",
into = c("Domain","Phylum","Class","Order","Family","Genus","Species")
) %>%
# save as matrix
as.matrix()
# change rownames of matrix to Feature ID
rownames(tax_mat) <- taxonomy$`Feature ID`
# create phyloseq tax table
TAX <- tax_table(tax_mat)
# check TAX class (should be phyloseq)
class(TAX)
tax_mat <- taxonomy %>%
select(-c(Confidence)) %>%
# reformat taxon strings, separate them into different columns
separate(col = Taxon, sep = "; ",
into = c("Domain","Phylum","Class","Order","Family","Genus","Species")
) %>%
# save as matrix
as.matrix()
# remove Feature ID from matrix
tax_mat <- tax_mat[,-1]
# change rownames of matrix to Feature ID
rownames(tax_mat) <- taxonomy$`Feature ID`
# create phyloseq tax table
TAX <- tax_table(tax_mat)
# check TAX class (should be phyloseq)
class(TAX)
tax_mat <- taxonomy %>%
select(-c(`Feature ID`, Confidence)) %>%
# reformat taxon strings, separate them into different columns
separate(col = Taxon, sep = "; ",
into = c("Domain","Phylum","Class","Order","Family","Genus","Species")
) %>%
# save as matrix
as.matrix()
# remove Feature ID from matrix
#tax_mat <- tax_mat[,-1]
# change rownames of matrix to Feature ID
rownames(tax_mat) <- taxonomy$`Feature ID`
# create phyloseq tax table
TAX <- tax_table(tax_mat)
# check TAX class (should be phyloseq)
class(TAX)
unique(tax_mat[,3])
unique(tax_mat[,2])
tax_mat <- taxonomy %>%
# remove Feature ID and Confidence cols
select(-c(`Feature ID`, Confidence)) %>%
# reformat taxon strings, separate them into different columns
separate(col = Taxon, sep = "; ",
into = c("Domain","Phylum","Class","Order","Family","Genus","Species")
) %>%
# remove the underscores and letters from taxon names
across(c("Domain","Phylum","Class","Order","Family","Genus","Species"),
function(x) str_remove_all(x, ".__")) %>%
# save as matrix
as.matrix()
tax_mat <- taxonomy %>%
# remove Feature ID and Confidence cols
select(-c(`Feature ID`, Confidence)) %>%
# reformat taxon strings, separate them into different columns
separate(col = Taxon, sep = "; ",
into = c("Domain","Phylum","Class","Order","Family","Genus","Species")
) %>%
# remove the underscores and letters from taxon names
mutate(
across(c("Domain","Phylum","Class","Order","Family","Genus","Species"),
function(x) str_remove_all(x, ".__"))) %>%
# save as matrix
as.matrix()
# change rownames of matrix to Feature ID
rownames(tax_mat) <- taxonomy$`Feature ID`
# create phyloseq tax table
TAX <- tax_table(tax_mat)
# check TAX class (should be phyloseq)
class(TAX)
View(tax_mat)
starch <- phyloseq(OTU, SAM, TAX, tree)
# check
class(starch)
write_rds(starch, "data/output/exports/starch_unfiltered_phyloseq.RDS")
